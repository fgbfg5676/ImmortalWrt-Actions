```yaml
# Build OpenWrt for MobiPromo CM520-79F (ARMv7 / ipq40xx/generic)
name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: CM520-79F

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      actions: write
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y file
          echo "Installed file package: $(file --version)"

      - name: Setup Go (host system)
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.0'
          check-latest: true

      - name: Debug initial Go
        run: |
          echo "Initial Go version: $(go version)"
          echo "Go path: $(which go)"
          echo "Checking symbolic links for bash and perl:"
          ls -l /bin/bash /usr/bin/bash /usr/bin/perl || echo "Symbolic link check failed"

      - name: Clone OpenWrt source
        run: |
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
          echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
          echo "DATE=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "DATE1=$(date '+%Y-%m-%d')" >> $GITHUB_ENV

      - name: Clean old Go and staging
        run: |
          cd openwrt
          rm -rf staging_dir/host/go staging_dir/host/bin/go \
                 staging_dir/host/stamp/.golang* \
                 staging_dir/hostpkg/stamp/.golang* \
                 build_dir/host/golang build_dir/hostpkg/golang
          echo "Cleaned old Go and host-golang stamps"

      - name: Restore cached Go
        id: go-cache
        uses: actions/cache@v4
        with:
          path: openwrt/staging_dir/host/go
          key: ${{ runner.os }}-host-go-1.25.0

      - name: Setup host Go 1.25 for OpenWrt
        run: |
          cd openwrt
          mkdir -p staging_dir/host/go staging_dir/host/bin staging_dir/host/stamp staging_dir/hostpkg/stamp

          if [ ! -x staging_dir/host/go/bin/go ] || [ "$(staging_dir/host/go/bin/go version | grep -o 'go1.25.0')" != "go1.25.0" ]; then
            echo "Installing Go 1.25.0 to staging_dir/host/go..."
            rm -rf staging_dir/host/go
            mkdir -p staging_dir/host/go
            GO_URL="https://dl.google.com/go/go1.25.0.linux-amd64.tar.gz"
            wget -q "$GO_URL" -O /tmp/go1.25.tar.gz || {
              echo "Failed to download Go 1.25 from $GO_URL"
              exit 1
            }
            tar -C staging_dir/host/go -xzf /tmp/go1.25.tar.gz --strip-components=1 || {
              echo "Failed to extract Go 1.25"
              exit 1
            }
            rm -f /tmp/go1.25.tar.gz
          else
            echo "Using cached Go 1.25.0"
          fi

          ln -sf $PWD/staging_dir/host/go/bin/go staging_dir/host/bin/go
          ln -sf $PWD/staging_dir/host/go/bin/gofmt staging_dir/host/bin/gofmt || true
          touch staging_dir/host/stamp/.golang_installed
          touch staging_dir/hostpkg/stamp/.golang_installed
          echo "Marked host-golang and hostpkg-golang as installed"

          export PATH="$PWD/staging_dir/host/bin:$PATH"
          echo "OPENWRT_GO_PATH=$PWD/staging_dir/host/bin" >> $GITHUB_ENV
          echo "GO_VERSION_USED=1.25.0" >> $GITHUB_ENV

          echo "Go setup:"
          echo "  Path: $(which go)"
          echo "  Version: $(go version)"
          ls -la staging_dir/host/stamp/.golang_installed || echo "No host stamp file"
          ls -la staging_dir/hostpkg/stamp/.golang_installed || echo "No hostpkg stamp file"

      - name: Cache dl files
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-openwrt-dl-${{ hashFiles('.config') }}

      - name: Load custom feeds and configs
        run: |
          cd openwrt
          export PATH="$OPENWRT_GO_PATH:$PATH"
          chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH $GITHUB_WORKSPACE/$DIY_P2_SH
          $GITHUB_WORKSPACE/$DIY_P1_SH || {
            echo "diy-part1.sh failed"
            exit 1
          }
          ./scripts/feeds update -a || {
            echo "feeds update failed"
            exit 1
          }
          ./scripts/feeds install -a -f -p my_packages || {
            echo "feeds install my_packages failed"
            exit 1
          }
          ./scripts/feeds install -a -p passwall_packages || {
            echo "feeds install passwall_packages failed"
            exit 1
          }
          ./scripts/feeds install -a || {
            echo "feeds install failed"
            exit 1
          }
          [ -e $GITHUB_WORKSPACE/$CONFIG_FILE ] && cp $GITHUB_WORKSPACE/$CONFIG_FILE .config
          [ -e files ] && cp -r files files_backup
          $GITHUB_WORKSPACE/$DIY_P2_SH || {
            echo "diy-part2.sh failed"
            exit 1
          }
          echo "Go version after feeds: $(go version)"
          echo "xray-core Makefile:"
          cat feeds/my_packages/xray-core/Makefile 2>/dev/null || echo "xray-core Makefile not found"

      - name: Prepare build
        run: |
          cd openwrt
          export PATH="$OPENWRT_GO_PATH:$PATH"
          echo "Build preparation with Go: $(go version)"
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        id: compile
        run: |
          cd openwrt
          export PATH="$OPENWRT_GO_PATH:$PATH"
          export GOTOOLCHAIN=local
          echo "Compiling with Go: $(which go) - $(go version)"
          echo "Checking symbolic links:"
          ls -la /bin/bash /usr/bin/bash /usr/bin/perl || echo "Symbolic link check failed"
          ls -la staging_dir/host/bin/go || echo "Go binary not found"
          ls -la staging_dir/host/stamp/.golang_installed || echo "No host stamp file"
          ls -la staging_dir/hostpkg/stamp/.golang_installed || echo "No hostpkg stamp file"
          echo "Using single-thread build to ensure xray-core stability..."
          make -j1 V=s || {
            echo "Build failed, check logs for details"
            exit 1
          }
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Handle build failure
        if: failure()
        run: |
          cd openwrt
          export PATH="$OPENWRT_GO_PATH:$PATH"
          echo "=== Build Failure Analysis ==="
          echo "Go version: $(go version 2>/dev/null || echo 'Go not found')"
          echo "Go path: $(which go 2>/dev/null || echo 'Go not in PATH')"
          ls -la staging_dir/host/bin/go || echo "Go binary not found"
          ls -la staging_dir/host/stamp/.golang_installed || echo "No host stamp file"
          ls -la staging_dir/hostpkg/stamp/.golang_installed || echo "No hostpkg stamp file"
          echo "Checking symbolic links:"
          ls -la /bin/bash /usr/bin/bash /usr/bin/perl || echo "Symbolic link check failed"
          echo "xray-core Makefile:"
          cat feeds/my_packages/xray-core/Makefile 2>/dev/null || echo "xray-core Makefile not found"
          grep -r "requires go >=" build_dir/ logs/ 2>/dev/null | head -5 || echo "No Go version requirements found"
          grep -r "GOTOOLCHAIN" build_dir/ logs/ 2>/dev/null | head -3 || echo "No GOTOOLCHAIN messages found"
          grep -E "(xray|CONFIG_PACKAGE.*xray)" .config || echo "No xray packages found in config"
          find . -type f -name "go" -exec sh -c 'echo "{}: $({} version 2>/dev/null)"' \;

      - name: Organize firmware
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success'
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Release firmware
        uses: ncipollo/release-action@v1
        if: steps.compile.outputs.status == 'success'
        with:
          name: R${{ env.DATE }} for ${{ env.FILE_NAME }}
          allowUpdates: true
          removeArtifacts: true
          tag: ${{ env.FILE_NAME }}
          commit: main
          artifacts: ${{ env.FIRMWARE }}/*
          body: |
            - 默认IP：10.10.10.100 默认密码：无
            - 使用 Go 版本: ${{ env.GO_VERSION_USED }}
            - 当前使用版本:【编译前最后一次源码更新记录】 
            ${{ env.useVersionInfo }}
```
