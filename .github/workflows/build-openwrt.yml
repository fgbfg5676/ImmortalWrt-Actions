# Build OpenWrt for CM520-79F - Optimized
name: Build OpenWrt for CM520-79F

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  FILE_NAME: CM520-79F
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 240
    permissions:
      actions: write
      contents: write

    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        df -hT

    - name: Optimize Disk Space
      uses: hugoalh/disk-space-optimizer-ghaction@v0.8.1
      with:
        operate_sudo: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1

    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL bit.ly/3AS48v1)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Setup Go (1.25.x)
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.x'

    - name: Verify Go version
      run: |
        GO_VER=$(go version | awk '{print $3}')
        if [[ "$GO_VER" != go1.25.* ]]; then
          echo "[ERROR] Go version mismatch. Required: go1.25.x, Found: $GO_VER"
          exit 1
        else
          echo "[SUCCESS] Go version OK: $GO_VER"
        fi

    - name: Clone ImmortalWrt source
      run: |
        if [ -d openwrt ]; then rm -rf openwrt; fi
        git clone --depth=1 -b $REPO_BRANCH $REPO_URL openwrt
        cd openwrt
        echo "Current commit: $(git rev-parse HEAD)"

    - name: Download and run create-banner.sh
      run: |
        wget -qO /tmp/create-banner.sh https://raw.githubusercontent.com/fgbfg5676/ImmortalWrt-Actions/main/create-banner.sh
        chmod +x /tmp/create-banner.sh
        bash /tmp/create-banner.sh

    - name: Run DIY part1 script
      run: |
        cd openwrt
        if [ -f "../$DIY_P1_SH" ]; then
          chmod +x "../$DIY_P1_SH"
          "../$DIY_P1_SH"
        fi

    - name: Add additional feeds
      run: |
        cd openwrt
        echo "src-git golang https://github.com/sbwml/packages_lang_golang;25.x" >> feeds.conf.default

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Copy custom configuration
      run: |
        cd openwrt
        if [ -f "../$CONFIG_FILE" ]; then
          cp "../$CONFIG_FILE" .config
        else
          make defconfig
        fi

    - name: Verify banner package in config
      run: |
        cd openwrt
        echo "Checking for luci-app-banner in .config..."
        if grep -q "CONFIG_PACKAGE_luci-app-banner=y" .config; then
          echo "[SUCCESS] luci-app-banner is enabled in config"
        else
          echo "[WARNING] luci-app-banner not found in config, adding it..."
          echo "CONFIG_PACKAGE_luci-app-banner=y" >> .config
        fi
        
        echo "Verifying custom package structure..."
        if [ -d "package/custom/luci-app-banner" ]; then
          echo "[SUCCESS] Custom banner package directory exists"
          echo "Package files:"
          find package/custom/luci-app-banner -type f | head -10
        else
          echo "[ERROR] Custom banner package directory not found"
          exit 1
        fi

    - name: Run DIY part2 script
      run: |
        cd openwrt
        if [ -f "../$DIY_P2_SH" ]; then
          chmod +x "../$DIY_P2_SH"
          "../$DIY_P2_SH"
        fi

    - name: Generate final config and verify banner
      run: |
        cd openwrt
        make defconfig
        
        echo "Final check for banner package in config:"
        if grep -q "CONFIG_PACKAGE_luci-app-banner=y" .config; then
          echo "[SUCCESS] luci-app-banner confirmed in final config"
        else
          echo "[ERROR] luci-app-banner missing from final config"
          echo "Adding banner package to config..."
          echo "CONFIG_PACKAGE_luci-app-banner=y" >> .config
          make defconfig
        fi
        
        echo "Verifying custom package can be found:"
        if [ -f "package/custom/luci-app-banner/Makefile" ]; then
          echo "[SUCCESS] Banner package Makefile found and ready for build"
        else
          echo "[ERROR] Banner package Makefile not found"
          exit 1
        fi

    - name: Download packages with retry
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: Build OpenWrt firmware
      run: |
        cd openwrt
        echo "Starting build process..."
        make -j$(nproc) || make -j1 || make -j1 V=s
        
        # Check if banner package was built
        if [ -f "bin/packages/*/luci/luci-app-banner*.ipk" ]; then
          echo "[SUCCESS] luci-app-banner package was built successfully"
          ls -la bin/packages/*/luci/luci-app-banner*
        else
          echo "[WARNING] luci-app-banner package not found in build output"
          echo "Available LuCI packages:"
          find bin/packages -name "luci-app-*" | head -5
        fi
        
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Prepare outputs
      run: |
        cd openwrt
        DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | head -1)
        DEVICE_NAME=${DEVICE_NAME:-unknown}
        echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$(pwd)/bin/targets/*/*" >> $GITHUB_ENV

    - name: Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt_${{ env.FILE_NAME }}_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}
        retention-days: 30

    - name: Upload build logs and config
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-info_${{ env.FILE_DATE }}
        path: |
          openwrt/logs/
          openwrt/.config
          openwrt/bin/packages/
        retention-days: 7
