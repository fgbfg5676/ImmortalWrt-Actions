# Build OpenWrt for CM520-79F
name: Build OpenWrt for CM520-79F

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  FILE_NAME: CM520-79F
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 360
    
    steps:
    - name: Checkout source code
      uses: actions/checkout@v5

    - name: Free up disk space
      run: |
        echo "Freeing up disk space..."
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h

    - name: Install build dependencies
      run: |
        echo "Enabling i386 architecture and installing dependencies..."
        # Enable i386 architecture for 32-bit libraries
        sudo dpkg --add-architecture i386
        
        sudo apt-get update
        
        # Install dependencies for Ubuntu 24.04
        # Replaced python3-distutils with python3-dev and python3-setuptools
        sudo apt-get install -y --no-install-recommends \
          build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libssl-dev python3-dev python3-setuptools rsync unzip \
          zlib1g-dev file wget subversion patch upx-ucl autoconf automake \
          curl asciidoc binutils bzip2 gzip p7zip p7zip-full libelf-dev \
          lib32gcc-s1 libc6-dev lib32stdc++6 zlib1g-dev:i386 lib32z1-dev \
          ccache ecj fastjar re2c xz-utils python3 python3-pip python3-ply \
          python3-venv python3-yaml haveged lrzsz device-tree-compiler scons \
          antlr3 gperf intltool mkisofs qemu-utils swig tar
        
        # Clean apt cache to save space
        echo "Cleaning apt cache..."
        sudo apt-get clean
        sudo apt-get autoremove -y

    - name: Setup Go (Version 1.25 )
      uses: actions/setup-go@v5
      with:
        # Using Go 1.25 to avoid potential build errors with packages like xray-core
        go-version: '1.25'
        check-latest: true

    - name: Cache downloads
      uses: actions/cache@v4
      with:
        path: openwrt/dl
        key: dl-${{ env.REPO_BRANCH }}-${{ hashFiles('**/feeds.conf.default') }}
        restore-keys: |
          dl-${{ env.REPO_BRANCH }}-
          dl-

    - name: Cache toolchain
      uses: actions/cache@v4
      with:
        path: openwrt/staging_dir
        key: toolchain-${{ env.REPO_BRANCH }}-${{ runner.arch }}-${{ hashFiles('**/.config') }}
        restore-keys: |
          toolchain-${{ env.REPO_BRANCH }}-${{ runner.arch }}-
          toolchain-

    - name: Clone ImmortalWrt source
      run: |
        git clone --depth=1 -b $REPO_BRANCH $REPO_URL openwrt
        cd openwrt
        echo "Current commit: $(git rev-parse HEAD)"
        echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Add additional feeds
      run: |
        cd openwrt
        echo "Adding golang and node feeds..."
        # Using a specific commit for golang feed for stability
        echo "src-git golang https://github.com/sbwml/packages_lang_golang;22.x" >> feeds.conf.default
        echo "src-git node https://github.com/nxhack/openwrt-node-packages.git" >> feeds.conf.default
        
        echo "Updated feeds configuration:"
        cat feeds.conf.default

    - name: Update and install feeds
      run: |
        cd openwrt
        echo "Updating feeds..."
        ./scripts/feeds update -a
        echo "Installing feeds..."
        ./scripts/feeds install -a

    - name: Run DIY part1 script
      run: |
        cd openwrt
        if [ -f "../$DIY_P1_SH" ]; then
          echo "Running $DIY_P1_SH..."
          chmod +x "../$DIY_P1_SH"
          "../$DIY_P1_SH"
          echo "DIY part1 script completed"
        else
          echo "DIY part1 script not found, skipping"
        fi

    - name: Copy custom configuration
      run: |
        cd openwrt
        if [ -f "../$CONFIG_FILE" ]; then
          cp "../$CONFIG_FILE" .config
          echo "Custom .config copied"
        else
          echo "Custom .config not found, using default"
          make defconfig
        fi

    - name: Run DIY part2 script
      run: |
        cd openwrt
        if [ -f "../$DIY_P2_SH" ]; then
          echo "Running $DIY_P2_SH..."
          chmod +x "../$DIY_P2_SH"
          "../$DIY_P2_SH"
          echo "DIY part2 script completed"
        else
          echo "DIY part2 script not found, skipping"
        fi

    - name: Generate final config
      run: |
        cd openwrt
        make defconfig
        
        # Disable problematic packages that cause golang/host warnings
        # This helps ensure a smoother build by avoiding known conflicts
        sed -i 's/CONFIG_PACKAGE_adguardhome=y/# CONFIG_PACKAGE_adguardhome is not set/' .config || true
        sed -i 's/CONFIG_PACKAGE_sing-box=y/# CONFIG_PACKAGE_sing-box is not set/' .config || true
        sed -i 's/CONFIG_PACKAGE_cloudflared=y/# CONFIG_PACKAGE_cloudflared is not set/' .config || true
        sed -i 's/CONFIG_PACKAGE_frp=y/# CONFIG_PACKAGE_frp is not set/' .config || true
        
        make defconfig
        echo "Configuration synchronized"

    - name: Download packages
      run: |
        cd openwrt
        echo "Downloading packages..."
        
        # First attempt with parallel download
        if ! make download -j$(nproc ); then
          echo "Parallel download failed, retrying with single thread..."
          make download -j1 V=s
        fi
        
        # Clean up failed downloads
        find dl -size -1024c -delete 2>/dev/null || true
        find dl -name "*.hash" -delete 2>/dev/null || true
        
        echo "Download completed. Cache size:"
        du -sh dl/

    - name: Compile toolchain
      run: |
        cd openwrt
        echo "Compiling toolchain..."
        
        # Build tools first
        make tools/install -j$(nproc) V=s || make tools/install -j1 V=s
        
        # Build toolchain
        make toolchain/install -j$(nproc) V=s || make toolchain/install -j1 V=s

    - name: Build OpenWrt firmware
      run: |
        cd openwrt
        echo "Starting firmware build..."
        echo "Available CPU cores: $(nproc)"
        echo "Available memory: $(free -h)"
        
        # Try parallel build first, fallback to single-threaded on failure
        if ! make -j$(nproc); then
          echo "Parallel build failed, retrying with single thread and verbose output..."
          make -j1 V=s
        fi
        
        echo "Build completed successfully!"

    - name: Prepare outputs
      run: |
        cd openwrt
        
        # Get device name from config
        DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | head -1)
        if [ -z "$DEVICE_NAME" ]; then
          DEVICE_NAME="unknown"
        fi
        
        # Set environment variables
        echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$(pwd)/bin/targets/*/*" >> $GITHUB_ENV
        
        echo "Firmware files:"
        ls -la bin/targets/*/*

    - name: Check firmware size
      run: |
        cd openwrt
        echo "Firmware size information:"
        find bin/targets -name "*.bin" -o -name "*.img" -o -name "*.trx" | while read file; do
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file" 2>/dev/null)
            echo "$(basename "$file"): ${size} bytes ($(numfmt --to=iec $size))"
          fi
        done

    - name: Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt_${{ env.FILE_NAME }}_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}
        retention-days: 30

    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs_${{ env.FILE_DATE }}
        path: |
          openwrt/logs/
          openwrt/.config
        retention-days: 7

    - name: Create GitHub Release
      if: success()
      uses: ncipollo/release-action@v1
      with:
        name: OpenWrt ${{ env.FILE_NAME }} - ${{ env.FILE_DATE }}
        tag: ${{ env.FILE_NAME }}-${{ env.FILE_DATE }}
        commit: ${{ github.sha }}
        allowUpdates: true
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          ## OpenWrt Firmware for ${{ env.FILE_NAME }}
          
          **Device**: ${{ env.DEVICE_NAME }}  
          **Build Date**: ${{ env.FILE_DATE }}  
          **Source**: ImmortalWrt ${{ env.REPO_BRANCH }}  
          **Commit**: ${{ env.COMMIT_HASH }}  
          **Go Version**: 1.25.x  
          
          ### Default Settings
          - **Default IP**: 10.10.10.100
          - **Default Password**: (none)
          - **Web Interface**: http://10.10.10.100
          
          ### Installation
          1. Flash the appropriate firmware file for your device
          2. Wait for the device to boot completely
          3. Connect via web browser to configure
