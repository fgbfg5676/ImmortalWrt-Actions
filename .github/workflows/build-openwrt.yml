# Build OpenWrt for MobiPromo CM520-79F (ARMv7 / ipq40xx/generic)
name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: CM520-79F   # 使用设备型号

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      actions: write
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup initial Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'       # 使用最新稳定版
          check-latest: true

      - name: Debug initial Go
        run: |
          echo "Initial Go version:"
          go version
          export GO_BIN=$(which go)
          echo "GO_BIN=$GO_BIN"

      - name: Clone OpenWrt source
        run: |
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
          echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
          echo "DATE=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "DATE1=$(date '+%Y-%m-%d')" >> $GITHUB_ENV

      - name: Load custom feeds and configs
        run: |
          cd openwrt
          chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH $GITHUB_WORKSPACE/$DIY_P2_SH
          $GITHUB_WORKSPACE/$DIY_P1_SH
          ./scripts/feeds update -a
          ./scripts/feeds install -a -f -p my_packages
          ./scripts/feeds install -a -p passwall_packages
          ./scripts/feeds install -a
          [ -e $GITHUB_WORKSPACE/$CONFIG_FILE ] && cp $GITHUB_WORKSPACE/$CONFIG_FILE .config
          [ -e files ] && cp -r files files_backup
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Determine Go version for xray-core
        run: |
          cd openwrt
          CURRENT_GO=$(go version | grep -o 'go[0-9.]*' | tr -d 'go')
          echo "Current Go: $CURRENT_GO"
          GO_FALLBACK="1.23"  # 稳定最低版本 fallback

          if [ -f "feeds/my_packages/xray-core/go.mod" ]; then
            X_GO_REQ=$(grep '^go ' feeds/my_packages/xray-core/go.mod | awk '{print $2}')
            echo "xray-core requires Go >= $X_GO_REQ"
            # 判断当前 Go 是否满足要求
            if [ "$(printf '%s\n' "$CURRENT_GO" "$X_GO_REQ" | sort -V | head -n1)" != "$X_GO_REQ" ]; then
              echo "Current Go < required, using fallback $GO_FALLBACK if necessary"
              echo "GO_VERSION=$GO_FALLBACK" >> $GITHUB_ENV
            else
              echo "GO_VERSION=$CURRENT_GO" >> $GITHUB_ENV
            fi
          else
            echo "No xray-core go.mod found, using current Go"
            echo "GO_VERSION=$CURRENT_GO" >> $GITHUB_ENV
          fi

      - name: Prepare staging host Go
        run: |
          cd openwrt
          mkdir -p staging_dir/host/bin
          ln -sf "$(which go)" staging_dir/host/bin/go || true
          ln -sf "$(dirname $(which go))/gofmt" staging_dir/host/bin/gofmt || true
          echo "PATH=$PWD/staging_dir/host/bin:$PATH" >> $GITHUB_ENV
          echo "Staging host Go version: $(staging_dir/host/bin/go version)"

      - name: Prepare build
        run: |
          cd openwrt
          export PATH=$PWD/staging_dir/host/bin:$PATH
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        id: compile
        run: |
          cd openwrt
          export PATH=$PWD/staging_dir/host/bin:$PATH
          echo "Using Go: $(which go) $(go version)"
          echo "$(nproc) thread compile"
          make -j$(nproc) || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Handle build failure
        if: failure()
        run: |
          cd openwrt
          echo "Build failed. Checking for Go version issues..."
          if grep -r "requires go >=" build_dir/ 2>/dev/null; then
            echo "Go version requirement found:"
            grep -r "requires go >=" build_dir/ 2>/dev/null || true
            echo "Current Go version: $(go version)"
          fi
          if [ -f ".config" ]; then
            echo "=== Build Configuration ==="
            grep -E "(xray|CONFIG_PACKAGE.*xray)" .config || echo "No xray packages found in config"
          fi

      - name: Organize firmware
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success'
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Release firmware
        uses: ncipollo/release-action@v1
        if: steps.compile.outputs.status == 'success'
        with:
          name: R${{ env.DATE }} for ${{ env.FILE_NAME }}
          allowUpdates: true
          removeArtifacts: true
          tag: ${{ env.FILE_NAME }}
          commit: main
          artifacts: ${{ env.FIRMWARE }}/*
          body: |
            - 默认IP：10.10.10.100 默认密码：无
            - 当前使用版本:【编译前的最后一次[源码](https://github.com/immortalwrt/immortalwrt/tree/openwrt-24.10)更新记录】 
            ${{ env.useVersionInfo }}
