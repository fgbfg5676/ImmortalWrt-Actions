# .github/workflows/build.yml
name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: CM520-79F

jobs:
  build:
    runs-on: ubuntu-22.04

    # 强制 OpenWrt golang 使用本地工具链（由 setup-go 提供）
    env:
      GOTOOLCHAIN: local

    permissions:
      actions: write
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Go 1.25.1 (explicit)
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.1'

      - name: Debug Go environment
        run: |
          echo "=== go info ==="
          go version
          go env GOPATH GOCACHE GOMODCACHE GOROOT
          echo "GOTOOLCHAIN=$GOTOOLCHAIN"

      - name: Clone OpenWrt source
        run: |
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
          echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
          echo "DATE=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "DATE1=$(date '+%Y-%m-%d')" >> $GITHUB_ENV

      - name: Run diy-part1 (add feeds / prepare)
        working-directory: openwrt
        run: |
          chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH || true
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update and install all feeds (ensure default LuCI/OpenClash present)
        working-directory: openwrt
        run: |
          set -euo pipefail
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          echo "Feeds installed. Quick check for openclash package..."
          if [ -d "package/feeds/luci/luci-app-openclash" ] || [ -d "feeds/luci/applications/luci-app-openclash" ]; then
            echo "OpenClash package found."
          else
            echo "ERROR: luci-app-openclash not found after feeds install."
            ls -R package/feeds | sed -n '1,200p' || true
            exit 1
          fi

      - name: Run diy-part2 (apply overlays, copy .config, add packages)
        working-directory: openwrt
        run: |
          set -euo pipefail
          chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH || true
          if [ -f "$GITHUB_WORKSPACE/$CONFIG_FILE" ]; then
            cp -f "$GITHUB_WORKSPACE/$CONFIG_FILE" .config
            echo ".config copied from repo root"
          else
            echo ".config not found; will use default defconfig"
          fi
          if [ -d "$GITHUB_WORKSPACE/files" ]; then
            cp -r "$GITHUB_WORKSPACE/files" ./files_overlay || true
            echo "files overlay copied"
          fi
          $GITHUB_WORKSPACE/$DIY_P2_SH || true

      - name: Ensure host 'go' is used by OpenWrt build
        run: |
          mkdir -p openwrt/staging_dir/host/bin
          GO_HOST_BIN=$(which go)
          echo "Host go binary: $GO_HOST_BIN"
          ln -sf "$GO_HOST_BIN" openwrt/staging_dir/host/bin/go
          file openwrt/staging_dir/host/bin/go || true
          openwrt/staging_dir/host/bin/go version || true

      - name: Prepare build (defconfig + download)
        working-directory: openwrt
        run: |
          set -euo pipefail
          if [ -f .config ]; then
            echo ".config exists; skipping menuconfig"
          else
            echo "No .config present; running make defconfig"
          fi
          make defconfig
          make download -j8
          find dl -size -1024c -exec rm -f {} \; || true

      - name: Compile firmware (quiet by default, verbose on failure)
        id: compile
        working-directory: openwrt
        run: |
          set -euo pipefail
          echo "Using GOTOOLCHAIN=$GOTOOLCHAIN"
          echo "$(nproc) threads compiling (quiet mode)"
          if ! make -j$(nproc); then
            echo "⚠️ Parallel build failed; retrying with verbose output..."
            make -j1 V=s
          fi
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME || true
          if [ -s DEVICE_NAME ]; then
            echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          fi
          echo "FILE_DATE=_$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Organize firmware (if success)
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages || true
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload firmware artifact
        if: steps.compile.outputs.status == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Create Release (upload to GitHub Release)
        if: steps.compile.outputs.status == 'success'
        uses: ncipollo/release-action@v1
        with:
          name: R${{ env.DATE }} for ${{ env.FILE_NAME }}
          allowUpdates: true
          removeArtifacts: true
          tag: ${{ env.FILE_NAME }}
          commit: main
          artifacts: ${{ env.FIRMWARE }}/*
          body: |
            - 默认IP：10.10.10.100 默认密码：无
            - 当前使用版本:【源码更新记录】
            ${{ env.useVersionInfo }}
