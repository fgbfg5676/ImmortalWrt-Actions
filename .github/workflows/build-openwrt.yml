# Build OpenWrt for MobiPromo CM520-79F (ARMv7 / ipq40xx/generic)
name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: CM520-79F

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      actions: write
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go (host system)
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.0'
          check-latest: true

      - name: Debug initial Go
        run: |
          echo "Initial Go version: $(go version)"
          echo "Go path: $(which go)"

      - name: Restore cached Go
        uses: actions/cache@v4
        id: go-cache
        with:
          path: staging_dir/host/go
          key: ${{ runner.os }}-host-go-1.25

      - name: Clone OpenWrt source
        run: |
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
          echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
          echo "DATE=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "DATE1=$(date '+%Y-%m-%d')" >> $GITHUB_ENV

      - name: Clean old Go and staging
        run: |
          cd openwrt
          rm -rf staging_dir/host/go staging_dir/host/bin/go \
                 staging_dir/host/stamp/.golang* \
                 staging_dir/hostpkg/stamp/.golang* \
                 build_dir/host/golang build_dir/hostpkg/golang
          echo "Cleaned old Go and host-golang stamps"

      - name: Setup host Go 1.25 for OpenWrt
        run: |
          cd openwrt
          mkdir -p staging_dir/host/go staging_dir/host/bin staging_dir/host/stamp staging_dir/hostpkg/stamp

          if [ ! -x staging_dir/host/go/bin/go ]; then
            echo "Installing Go 1.25.0 to staging_dir/host/go..."
            GO_URL="https://dl.google.com/go/go1.25.0.linux-amd64.tar.gz"
            wget -q "$GO_URL" -O /tmp/go1.25.tar.gz || exit 1
            tar -C staging_dir/host/go -xzf /tmp/go1.25.tar.gz --strip-components=1 || exit 1
            rm -f /tmp/go1.25.tar.gz
          fi

          ln -sf $PWD/staging_dir/host/go/bin/go staging_dir/host/bin/go
          ln -sf $PWD/staging_dir/host/go/bin/gofmt staging_dir/host/bin/gofmt || true
          touch staging_dir/host/stamp/.golang_installed
          touch staging_dir/hostpkg/stamp/.golang_installed

          export PATH="$PWD/staging_dir/host/bin:$PATH"
          echo "OPENWRT_GO_PATH=$PWD/staging_dir/host/bin" >> $GITHUB_ENV
          echo "GO_VERSION_USED=1.25.0" >> $GITHUB_ENV

          echo "Go version: $(go version)"
          ls -la staging_dir/host/stamp/.golang_installed || echo "No host stamp file"

      - name: Cache dl files
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: ${{ runner.os }}-openwrt-dl-${{ hashFiles('.config') }}

      - name: Load custom feeds and configs
        run: |
          cd openwrt
          export PATH="$OPENWRT_GO_PATH:$PATH"
          chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH $GITHUB_WORKSPACE/$DIY_P2_SH
          $GITHUB_WORKSPACE/$DIY_P1_SH
          ./scripts/feeds update -a
          ./scripts/feeds install -a -f -p my_packages
          ./scripts/feeds install -a -p passwall_packages
          ./scripts/feeds install -a
          [ -e $GITHUB_WORKSPACE/$CONFIG_FILE ] && cp $GITHUB_WORKSPACE/$CONFIG_FILE .config
          [ -e files ] && cp -r files files_backup
          $GITHUB_WORKSPACE/$DIY_P2_SH
          echo "Go version after feeds: $(go version)"

      - name: Prepare build
        run: |
          cd openwrt
          export PATH="$OPENWRT_GO_PATH:$PATH"
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware (multi-thread + single-thread for xray-core)
        id: compile
        run: |
          cd openwrt
          export PATH="$OPENWRT_GO_PATH:$PATH"

          # 1. 多线程编译普通包
          echo "Compiling normal packages (multi-thread)..."
          make -j$(nproc) V=s || echo "Warning: multi-thread build failed, continuing to single-thread for sensitive packages"

          # 2. 单线程编译敏感包（xray-core）
          if grep -q "CONFIG_PACKAGE_XRAY_CORE=y" .config; then
            echo "Compiling xray-core (single-thread)..."
            make package/my_packages/xray-core/compile -j1 V=s || { echo "xray-core build failed"; exit 1; }
          fi

          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Handle build failure
        if: failure()
        run: |
          cd openwrt
          export PATH="$OPENWRT_GO_PATH:$PATH"
          echo "=== Build Failure Analysis ==="
          echo "Go version: $(go version 2>/dev/null || echo 'Go not found')"
          ls -la staging_dir/host/bin/go
          ls -la staging_dir/host/stamp/.golang_installed
          ls -la staging_dir/hostpkg/stamp/.golang_installed
          cat feeds/my_packages/xray-core/Makefile 2>/dev/null || echo "xray-core Makefile not found"
          grep -r "requires go >=" build_dir/ logs/ 2>/dev/null | head -5
          grep -r "GOTOOLCHAIN" build_dir/ logs/ 2>/dev/null | head -3
          grep -E "(xray|CONFIG_PACKAGE.*xray)" .config || echo "No xray packages found in config"
          find . -type f -name "go" -exec sh -c 'echo "{}: $({} version 2>/dev/null)"' \;

      - name: Organize firmware
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success'
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Release firmware
        uses: ncipollo/release-action@v1
        if: steps.compile.outputs.status == 'success'
        with:
          name: R${{ env.DATE }} for ${{ env.FILE_NAME }}
          allowUpdates: true
          removeArtifacts: true
          tag: ${{ env.FILE_NAME }}
          commit: main
          artifacts: ${{ env.FIRMWARE }}/*
          body: |
            - 默认IP：10.10.10.100 默认密码：无
            - 使用 Go 版本: ${{ env.GO_VERSION_USED }}
            - 当前使用版本:【编译前最后一次源码更新记录】 
            ${{ env.useVersionInfo }}
