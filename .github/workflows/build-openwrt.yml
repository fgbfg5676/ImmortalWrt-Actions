# Build OpenWrt for MobiPromo CM520-79F (ARMv7 / ipq40xx/generic)
name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: CM520-79F

jobs:
  build:
    runs-on: ubuntu-22.04
    permissions:
      actions: write
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      - name: Debug initial Go
        run: |
          echo "Initial Go version: $(go version)"
          echo "Go path: $(which go)"

      - name: Clone OpenWrt source
        run: |
          git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
          echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
          echo "DATE=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "DATE1=$(date '+%Y-%m-%d')" >> $GITHUB_ENV

      - name: Load custom feeds and configs
        run: |
          cd openwrt
          chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH $GITHUB_WORKSPACE/$DIY_P2_SH
          $GITHUB_WORKSPACE/$DIY_P1_SH
          ./scripts/feeds update -a
          ./scripts/feeds install -a -f -p my_packages
          ./scripts/feeds install -a -p passwall_packages
          ./scripts/feeds install -a
          [ -e $GITHUB_WORKSPACE/$CONFIG_FILE ] && cp $GITHUB_WORKSPACE/$CONFIG_FILE .config
          [ -e files ] && cp -r files files_backup
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: Setup OpenWrt Go environment
        run: |
          cd openwrt
          mkdir -p staging_dir/host/bin

          CURRENT_GO=$(go version | grep -o 'go[0-9.]*' | tr -d 'go')
          echo "Current system Go: $CURRENT_GO"

          GO_TO_USE=$(which go)
          GO_VERSION_TO_USE="$CURRENT_GO"

          # 检查 xray-core package
          REQUIRED_GO=""
          if [ -d "feeds/my_packages/xray-core" ]; then
            REQUIRED_GO="1.24"  # 保守估计
          fi

          if [ -n "$REQUIRED_GO" ]; then
            echo "xray-core requires Go >= $REQUIRED_GO"
            if [ "$(printf '%s\n' "$CURRENT_GO" "$REQUIRED_GO" | sort -V | head -n1)" = "$CURRENT_GO" ] && [ "$CURRENT_GO" != "$REQUIRED_GO" ]; then
              echo "Current Go ($CURRENT_GO) < required ($REQUIRED_GO), downloading Go $REQUIRED_GO..."
              GO_URL="https://golang.org/dl/go${REQUIRED_GO}.linux-amd64.tar.gz"
              wget -q "$GO_URL" -O "/tmp/go${REQUIRED_GO}.tar.gz" || {
                echo "Failed to download Go $REQUIRED_GO, fallback to 1.23"
                REQUIRED_GO="1.23"
                GO_URL="https://golang.org/dl/go${REQUIRED_GO}.linux-amd64.tar.gz"
                wget -q "$GO_URL" -O "/tmp/go${REQUIRED_GO}.tar.gz"
              }

              rm -rf staging_dir/host/go
              mkdir -p staging_dir/host/go
              tar -C staging_dir/host/go -xzf "/tmp/go${REQUIRED_GO}.tar.gz" --strip-components=1

              GO_TO_USE="$PWD/staging_dir/host/go/bin/go"
              GO_VERSION_TO_USE="$REQUIRED_GO"
              echo "Installed Go $REQUIRED_GO to staging_dir"
            else
              echo "Current Go version is sufficient"
            fi
          fi

          # 创建符号链接
          ln -sf "$GO_TO_USE" staging_dir/host/bin/go
          ln -sf "$(dirname "$GO_TO_USE")/gofmt" staging_dir/host/bin/gofmt 2>/dev/null || true

          # 安全写入 GITHUB_ENV
          echo "OPENWRT_GO_PATH=$PWD/staging_dir/host/bin" >> $GITHUB_ENV
          echo "GO_VERSION_USED=$(echo $GO_VERSION_TO_USE | tr -d '"\n\r')" >> $GITHUB_ENV

          export PATH="$PWD/staging_dir/host/bin:$PATH"
          echo "Final Go setup:"
          echo "  Path: $(which go)"
          echo "  Version: $(go version)"

      - name: Prepare build
        run: |
          cd openwrt
          export PATH="$OPENWRT_GO_PATH:$PATH"
          echo "Build preparation with Go: $(go version)"
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        id: compile
        run: |
          cd openwrt
          export PATH="$OPENWRT_GO_PATH:$PATH"
          echo "Compiling with Go: $(which go) - $(go version)"
          echo "Using $(nproc) threads..."
          make -j$(nproc) || {
            echo "Multi-thread build failed, retrying single thread..."
            make -j1 V=s
          }
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Handle build failure
        if: failure()
        run: |
          cd openwrt
          export PATH="$OPENWRT_GO_PATH:$PATH"
          echo "=== Build Failure Analysis ==="
          echo "Go version used: $(go version 2>/dev/null || echo 'Go not found')"
          echo "Go path: $(which go 2>/dev/null || echo 'Go not in PATH')"
          if grep -r "requires go >=" build_dir/ logs/ 2>/dev/null | head -5; then
            echo "Found Go version requirements in build logs"
          fi
          if [ -f ".config" ]; then
            echo "=== Package Configuration ==="
            grep -E "(xray|CONFIG_PACKAGE.*xray)" .config || echo "No xray packages found in config"

      - name: Organize firmware
        if: steps.compile.outputs.status == 'success'
        run: |
          cd openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Upload firmware
        uses: actions/upload-artifact@v4
        if: steps.compile.outputs.status == 'success'
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Release firmware
        uses: ncipollo/release-action@v1
        if: steps.compile.outputs.status == 'success'
        with:
          name: R${{ env.DATE }} for ${{ env.FILE_NAME }}
          allowUpdates: true
          removeArtifacts: true
          tag: ${{ env.FILE_NAME }}
          commit: main
          artifacts: ${{ env.FIRMWARE }}/*
          body: |
            - 默认IP：10.10.10.100 默认密码：无
            - 使用 Go 版本: ${{ env.GO_VERSION_USED }}
            - 当前使用版本:【编译前最后一次源码更新记录】 
            ${{ env.useVersionInfo }}
