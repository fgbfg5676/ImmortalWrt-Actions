name: Build OpenWrt for CM520-79F

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  FILE_NAME: CM520-79F
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 360

    steps:
    - name: Checkout source code
      uses: actions/checkout@v5

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          build-essential g++ git wget curl ccache subversion unzip bzip2 gzip \
          python3 python3-venv python3-pip file rsync tar xz-utils patch gawk \
          bc flex bison gettext libncurses5-dev libssl-dev zlib1g-dev perl
        python3 -m pip install --upgrade pip setuptools wheel

    - name: Setup Go 1.25
      run: |
        mkdir -p $HOME/go1.25
        wget -q https://dl.google.com/go/go1.25.0.linux-amd64.tar.gz -O /tmp/go1.25.tar.gz
        tar -C $HOME/go1.25 -xzf /tmp/go1.25.tar.gz --strip-components=1
        rm /tmp/go1.25.tar.gz
        echo "$HOME/go1.25/bin" >> $GITHUB_PATH
        go version

    - name: Cache downloads
      uses: actions/cache@v4
      with:
        path: openwrt/dl
        key: dl-${{ github.run_id }}
        restore-keys: dl-

    - name: Cache toolchain
      uses: actions/cache@v4
      with:
        path: openwrt/staging_dir
        key: toolchain-${{ github.sha }}
        restore-keys: toolchain-

    - name: Clone ImmortalWrt source
      run: |
        git clone --depth=1 -b $REPO_BRANCH $REPO_URL openwrt

    - name: Prepare feeds and DIY part1
      run: |
        cd openwrt || exit 1
        # 确保 feeds.conf.default 存在
        if [ ! -e "feeds.conf.default" ]; then
          echo "⚠️ feeds.conf.default 不存在，执行 ./scripts/feeds update -a"
          ./scripts/feeds update -a
        fi
        # 安装所有 feeds
        ./scripts/feeds install -a

        # 执行 diy-part1.sh
        if [ -e ../$DIY_P1_SH ]; then
          chmod +x ../$DIY_P1_SH
          ../$DIY_P1_SH
          echo "✅ diy-part1.sh 执行完成"
        else
          echo "⚠️ diy-part1.sh 未找到，跳过"
        fi

    - name: Copy custom .config
      run: |
        cd openwrt
        if [ -e ../$CONFIG_FILE ]; then
          cp ../$CONFIG_FILE .config
          echo "✅ .config 已复制到 openwrt 目录"
        else
          echo "⚠️ .config 未找到，使用默认配置"
        fi

    - name: Run DIY part2
      run: |
        cd openwrt
        if [ -e ../$DIY_P2_SH ]; then
          chmod +x ../$DIY_P2_SH
          ../$DIY_P2_SH
          echo "✅ diy-part2.sh 执行完成"
        else
          echo "⚠️ diy-part2.sh 未找到，跳过"
        fi

    - name: Download packages
      run: |
        cd openwrt
        make download -j$(nproc)
        # 删除小于1KB的残留文件，避免错误
        find dl -size -1024c -delete

    - name: Build OpenWrt firmware
      run: |
        cd openwrt
        make defconfig
        make -j$(nproc) || make -j1 V=s
        # 获取目标设备名称
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
        echo "FIRMWARE=$(pwd)/bin/targets/*/*" >> $GITHUB_ENV

    - name: Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        name: R${{ env.FILE_DATE }} for ${{ env.FILE_NAME }}
        tag: ${{ env.FILE_NAME }}
        commit: main
        artifacts: ${{ env.FIRMWARE }}/*
        body: |
          - 默认IP：10.10.10.100 默认密码：无
          - Go 版本: 1.25
          - 编译时间: ${{ env.FILE_DATE }}
