name: Build OpenWrt for CM520-79F

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  FILE_NAME: CM520-79F
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 240
    permissions:
      actions: write
      contents: write

    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        df -hT

    - name: Optimize Disk Space
      uses: hugoalh/disk-space-optimizer-ghaction@v0.8.1
      with:
        operate_sudo: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1

    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Install build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL bit.ly/3AS48v1)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Setup Go (1.25.x)
      uses: actions/setup-go@v5
      with:
        go-version: '1.25.x'

    - name: Verify Go version
      run: |
        GO_VER=$(go version | awk '{print $3}')
        if [[ "$GO_VER" != go1.25.* ]]; then
          echo "[ERROR] Go version mismatch. Required: go1.25.x, Found: $GO_VER"
          exit 1
        else
          echo "[SUCCESS] Go version OK: $GO_VER"
        fi

    - name: Clone ImmortalWrt source
      run: |
        if [ -d openwrt ]; then rm -rf openwrt; fi
        git clone --depth=1 -b $REPO_BRANCH $REPO_URL openwrt
        cd openwrt
        echo "Current commit: $(git rev-parse HEAD)"

    - name: Download and run create-banner.sh
      run: |
        wget -qO /tmp/create-banner.sh https://raw.githubusercontent.com/fgbfg5676/ImmortalWrt-Actions/main/create-banner.sh
        chmod +x /tmp/create-banner.sh
        bash /tmp/create-banner.sh
        
    - name: Debug banner package creation
      run: |
        echo "=== Banner Package Debug Information ==="
        echo "Checking if banner package was created..."
        if [ -d "openwrt/package/custom/luci-app-banner" ]; then
          echo "✓ Banner package directory exists"
          echo "Package structure:"
          find openwrt/package/custom/luci-app-banner -type f | sort
          echo ""
          echo "Makefile preview:"
          head -30 openwrt/package/custom/luci-app-banner/Makefile
          echo ""
          echo "Controller file preview:"
          head -20 openwrt/package/custom/luci-app-banner/root/usr/lib/lua/luci/controller/banner.lua || echo "Controller file not found, but continuing..."
          echo ""
          echo "UCI config preview:"
          cat openwrt/package/custom/luci-app-banner/root/etc/config/banner
        else
          echo "✗ Banner package directory NOT found"
          echo "Available custom packages:"
          ls -la openwrt/package/custom/ 2>/dev/null || echo "No custom packages found"
          exit 1
        fi

    - name: Run DIY part1 script
      run: |
        cd openwrt
        if [ -f "../$DIY_P1_SH" ]; then
          chmod +x "../$DIY_P1_SH"
          "../$DIY_P1_SH"
        fi

    - name: Add additional feeds
      run: |
        cd openwrt
        echo "src-git golang https://github.com/sbwml/packages_lang_golang;25.x" >> feeds.conf.default

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Copy custom configuration
      run: |
        cd openwrt
        if [ -f "../$CONFIG_FILE" ]; then
          cp "../$CONFIG_FILE" .config
        else
          make defconfig
        fi

    - name: Verify banner package in config
      run: |
        cd openwrt
        echo "Checking for luci-app-banner in .config..."
        if grep -q "CONFIG_PACKAGE_luci-app-banner=y" .config; then
          echo "[SUCCESS] luci-app-banner is enabled in config"
        else
          echo "[WARNING] luci-app-banner not found in config, adding it..."
          echo "CONFIG_PACKAGE_luci-app-banner=y" >> .config
        fi
        
        echo "Verifying custom package structure..."
        if [ -d "package/custom/luci-app-banner" ]; then
          echo "[SUCCESS] Custom banner package directory exists"
          echo "Package files:"
          find package/custom/luci-app-banner -type f | sort | head -10
        else
          echo "[ERROR] Custom banner package directory not found"
          exit 1
        fi

    - name: Run DIY part2 script
      run: |
        cd openwrt
        if [ -f "../$DIY_P2_SH" ]; then
          chmod +x "../$DIY_P2_SH"
          "../$DIY_P2_SH"
        fi

    - name: Generate final config and verify banner
      run: |
        cd openwrt
        echo "=== Pre-defconfig Banner Check ==="
        if grep -q "CONFIG_PACKAGE_luci-app-banner=y" .config; then
          echo "✓ Banner package found in config before defconfig"
        else
          echo "! Banner package not in config before defconfig"
          echo "Adding banner package to config..."
          echo "CONFIG_PACKAGE_luci-app-banner=y" >> .config
        fi
        
        echo "Running make defconfig..."
        make defconfig
        
        echo "=== Post-defconfig Banner Check ==="
        if grep -q "CONFIG_PACKAGE_luci-app-banner=y" .config; then
          echo "✓ Banner package confirmed in final config"
        else
          echo "✗ Banner package missing from final config after defconfig"
          echo "This might indicate package dependency issues"
          echo "Adding banner package to config again..."
          echo "CONFIG_PACKAGE_luci-app-banner=y" >> .config
          make defconfig
          if grep -q "CONFIG_PACKAGE_luci-app-banner=y" .config; then
            echo "✓ Banner package now in config after manual addition"
          else
            echo "✗ Banner package still missing - there may be dependency issues"
            exit 1
          fi
        fi
        
        echo "=== Final Banner Package Verification ==="
        if [ -f "package/custom/luci-app-banner/Makefile" ]; then
          echo "✓ Banner package Makefile found and ready for build"
          echo "Testing package definition with make command..."
          make package/luci-app-banner/info V=s || echo "Package info command failed (this is often normal)"
        else
          echo "✗ Banner package Makefile not found"
          exit 1
        fi
        
        echo "=== Configuration Summary ==="
        echo "Total enabled packages: $(grep -c "^CONFIG_PACKAGE.*=y" .config)"
        echo "LuCI packages enabled: $(grep -c "^CONFIG_PACKAGE_luci-.*=y" .config)"
        echo "Custom packages enabled: $(grep "^CONFIG_PACKAGE.*custom.*=y" .config | wc -l)"

    - name: Download packages with retry
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: Build OpenWrt firmware
      run: |
        cd openwrt
        echo "Starting build process..."
        make -j$(nproc) || make -j1 || make -j1 V=s
        
        echo "Build completed, checking results..."
        
        echo "Looking for luci-app-banner package files..."
        if find bin -name "*luci-app-banner*" -type f 2>/dev/null | head -1; then
          echo "Banner package files found:"
          find bin -name "*luci-app-banner*" -type f -exec ls -la {} \; 2>/dev/null || true
        else
          echo "No explicit banner package files found, checking build logs..."
          if grep -q "make.*luci-app-banner.*compile" logs/*.log 2>/dev/null; then
            echo "Banner package was compiled (found in build logs)"
          else
            echo "Banner package may not have been built"
          fi
        fi
        
        echo "Checking if banner is integrated in firmware..."
        if ls bin/targets/*/*-squashfs-*.bin >/dev/null 2>&1; then
          echo "Firmware files found - banner should be integrated if compilation succeeded"
        fi
        
        echo "Build summary:"
        echo "- Total packages built: $(find bin/packages -name "*.ipk" 2>/dev/null | wc -l)"
        echo "- LuCI packages: $(find bin/packages -name "luci-*" 2>/dev/null | wc -l)"
        
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Prepare outputs
      run: |
        cd openwrt
        DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | head -1)
        DEVICE_NAME=${DEVICE_NAME:-unknown}
        echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$(pwd)/bin/targets/*/*" >> $GITHUB_ENV

    - name: Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: OpenWrt_${{ env.FILE_NAME }}_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}
        retention-days: 30

    - name: Upload build logs and config
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-info_${{ env.FILE_DATE }}
        path: |
          openwrt/logs/
          openwrt/.config
          openwrt/bin/packages/
        retention-days: 7
